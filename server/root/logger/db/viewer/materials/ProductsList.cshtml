@model BusinessAutomationWeb.Models.JTable.ProductsFilter
@using BusinessAutomationWeb.Helpers;
@using BusinessAutomationWeb.Models.Upload;
@{
    var nodeIdSuffix = ViewHelpers.GetNewNodeIdSuffix();
}

<!-- #region testTable -->

@if (AccessHelpers.AccessToProductsList(User))
{
    <script type="text/javascript">

        $(document).ready(function () {

            // #region File Upload

            //var uploadedFiles = [];

            $('#fileupload@(nodeIdSuffix)')
                .fileupload({
                    maxChunkSize: 1000000,
                    downloadTemplateId: "template-download@(nodeIdSuffix)",
                    uploadTemplateId: "template-upload@(nodeIdSuffix)",
                    add: function (e, data) {
                        var goUpload = true;
                        var uploadFile = data.files[0];
                        if (!(/\.(csv|txt)$/i).test(uploadFile.name)) {
                            showErrorDialog('Cannot add file: ' + uploadFile.name + '\nAllowed file types only: *.csv, *.txt');
                            goUpload = false;
                        }
                        if (uploadFile.size > 100000000) { // 100mb
                            showErrorDialog('Cannot add file: ' + uploadFile.name + '\nMaximum file size is 100 MB');
                            goUpload = false;
                        }
                        if (goUpload == true) {
                            data.submit();
                        }
                    }
                });
                //.on("fileuploadcompleted", function (event, data) {
                //    for (var i = 0; i < data.files.length; i++) {
                //        var file = data.files[i];
                //        var index = uploadedFiles.indexOf(file);
                //        if (index >= 0) {
                //            continue;
                //        }
                //        uploadedFiles.push(file);
                //    }
                //})
                //.on("fileuploaddestroyed", function (event, data) {
                //    var file = data.url.split("=")[1];
                //    var index = uploadedFiles.indexOf(file);
                //    if (index >= 0) {
                //        uploadedFiles.splice(index, 1);
                //    }
                //});

            // #endregion

            // #region Init table layout

            var setDialogLoadingMode = function(id, isLoading) {
                if (isLoading) {
                    $(id).parent().find(".dialog-submit-button").attr("disabled", "disabled");
                    $(id).find(".loading-overlay").show();
                } else {
                    $(id).parent().find(".dialog-submit-button").removeAttr("disabled");
                    $(id).find(".loading-overlay").hide();
                }
            };

            var importDialog = $( "#import-dialog@(nodeIdSuffix)" ).dialog({
                title: "Import to DataBase",
                autoOpen: false,
                height: 400,
                width: 700,
                modal: true,
                buttons: [
                    {
                        text: "Close",
                        click: function() {
                            // resetFileUploader();
                            $(this).dialog( "close" );
                            $('form#import-options@(nodeIdSuffix)')[0].reset();
                        }
                    },
                    {
                        'class': "dialog-submit-button",
                        text: "Import",
                        click: function() {
                            setDialogLoadingMode("#import-dialog@(nodeIdSuffix)", true);

                            var downloadedRows = $('tr.template-download');

                            if (downloadedRows.length == 0) {
                                setDialogLoadingMode("#import-dialog@(nodeIdSuffix)", false);
                                return;
                            }

                            $.ajax({
                                url: "/JTableProducts/Import",
                                method: 'POST',
                                data: $('form#fileupload@(nodeIdSuffix), form#import-options@(nodeIdSuffix)').serialize()
                            })
                            .done(function(data) {
                                if (data == null || data.Result == null) {
                                    showErrorDialog( "Import failed: responce data == null" );
                                    setDialogLoadingMode("#import-dialog@(nodeIdSuffix)", false);
                                    return;
                                }

                                if (data.Result != "OK") {
                                    showErrorDialog( "Import failed: " + data.Result + " " + data.Message);
                                    setDialogLoadingMode("#import-dialog@(nodeIdSuffix)", false);
                                    return;
                                }

                                if (!(data.Results instanceof Array) || data.Results.length == 0) {
                                    showErrorDialog( "Import failed: responce data.Results is empty" );
                                    setDialogLoadingMode("#import-dialog@(nodeIdSuffix)", false);
                                    return;
                                }

                                var errorFiles = [];
                                var successFiles = [];
                                for(var i = 0; i < data.Results.length; i++) {
                                    var result = data.Results[i];
                                    var file = result.file;
                                    var success = result.success;
                                    if (success) {
                                        successFiles.push("[OK] " + file);
                                    }
                                    else
                                    {
                                        errorFiles.push("[ERROR] " + file);
                                    }
                                }

                                downloadedRows.each(function() {
                                    var value = "[OK] " + $(this).find('input[name="files[]"]')[0].value;
                                    if (successFiles.indexOf(value) >= 0) {
                                        $(this).remove();
                                    }
                                });

                                if (errorFiles.length > 0) {
                                    showMessageDialog("Import completed with errors", errorFiles.join("\n") + "\n\n" + successFiles.join("\n"));
                                }
                                else
                                {
                                    showMessageDialog("Import successfull!", successFiles.join("\n"));
                                }

                                setDialogLoadingMode("#import-dialog@(nodeIdSuffix)", false);
                            })
                            .fail(function(data) {
                                showErrorDialog( "Import failed!\n" + JSON.stringify(data));
                                setDialogLoadingMode("#import-dialog@(nodeIdSuffix)", false);
                            });
                        }
                    }
                ]
            });

            setDialogLoadingMode("#import-dialog@(nodeIdSuffix)", false);

            // #endregion

            // #region Export Dialog

            var exportDialog = $("#export-dialog@(nodeIdSuffix)").dialog({
                title: "Export from DataBase",
                autoOpen: false,
                height: 200,
                width: 400,
                modal: true,
                buttons: [
                    {
                        text: "Close",
                        click: function() {
                            $(this).dialog( "close" );
                            $('form#export-options@(nodeIdSuffix)')[0].reset();
                        }
                    },
                    {
                        'class': "dialog-submit-button",
                        text: "Download",
                        click: function() {
                            setDialogLoadingMode("#export-dialog@(nodeIdSuffix)", true);

                            $.ajax({
                                url: "/JTableProducts/Export",
                                method: 'POST',
                                data: $('form#export-options@(nodeIdSuffix), form#jTable_filters@(nodeIdSuffix)').serialize()
                            })
                            .done(function(data) {
                                if (data == null || data.Result == null) {
                                    showErrorDialog( "Export failed: responce data == null" );
                                    setDialogLoadingMode("#export-dialog@(nodeIdSuffix)", false);
                                    return;
                                }

                                if (data.Result != "OK") {
                                    showErrorDialog( "Export failed: " + data.Result + " " + data.Message);
                                    setDialogLoadingMode("#export-dialog@(nodeIdSuffix)", false);
                                    return;
                                }

                                if (data.FileUrl == null || data.FileUrl.length == 0) {
                                    showErrorDialog( "Export failed: responce data.FileUrl is empty" );
                                    setDialogLoadingMode("#export-dialog@(nodeIdSuffix)", false);
                                    return;
                                }

                                $("#export_frame@(nodeIdSuffix)").attr("src", data.FileUrl);

                                setDialogLoadingMode("#export-dialog@(nodeIdSuffix)", false);
                            })
                            .fail(function(data) {
                                showErrorDialog( "Export failed!\n" + JSON.stringify(data));
                                setDialogLoadingMode("#export-dialog@(nodeIdSuffix)", false);
                            });
                        }
                    }
                ]
            });

            // #endregion

            // #region Init table layout

            // #region MarketplaceProducts Table

            var jtableMarketplaceProductsParams = function() {
                return {
                    title: 'Marketplace Products',

                    paging: false,
                    pageSize: 20,
                    pageSizes: [10, 15, 20, 30, 50, 100],
                    pageSizeChangeArea: true,

                    sorting: true,
                    defaultSorting: 'MarketplaceId ASC',
                    multiSorting: true,

                    multiselect: false,
                    columnResizable: false,
                    columnSelectable: true,
                    selecting: false,
                    selectingCheckboxes: false,
                    selectOnRowClick: false,

                    saveUserPreferences: true,
                    animationsEnabled: true,
                    defaultDateFormat: 'yyyy-mm-dd',
                    deleteConfirmation: true,

                    actions: {
                        listAction: '/JTableMarketplaceProducts/List'
                    },
                    fields: {
                        MarketplaceId: {
                            title: 'Marketplace',
                            defaultValue: -1,
                            options: '/JTableMarketplaceProducts/MarketplaceOptions',
                            optionsSorting: 'text'
                        },
                        Id_SKU_Custom: {
                            title: 'SKU',
                        },
                        Price: {
                            title: 'Price',
                        },
                        PriceUploadTime: {
                            title: 'PriceUploadTime',
                            display: function (data) {
                                return getJtableDisplayTime(data.record.PriceUploadTime);
                            },
                            create: false,
                            edit: false
                        },
                        Quantity: {
                            title: 'Quantity',
                        },
                        QuantityUploadTime: {
                            title: 'QuantityUploadTime',
                            display: function (data) {
                                return getJtableDisplayTime(data.record.QuantityUploadTime);
                            },
                            create: false,
                            edit: false
                        },
                        ProductCreateTime: {
                            title: 'ProductCreateTime',
                            display: function (data) {
                                return getJtableDisplayTime(data.record.ProductCreateTime);
                            },
                            create: false,
                            edit: false
                        },
                        ProductDeleteTime: {
                            title: 'ProductDeleteTime',
                            display: function (data) {
                                return getJtableDisplayTime(data.record.ProductDeleteTime);
                            },
                            create: false,
                            edit: false
                        }
                    }
                };
            }

            // #endregion

            // #region FeedProducts Table

            var jtableFeedProductsParams = function () {
                return {
                    title: 'Feed Products',

                    paging: false,
                    pageSize: 20,
                    pageSizes: [10, 15, 20, 30, 50, 100],
                    pageSizeChangeArea: true,

                    sorting: true,
                    defaultSorting: 'FeedId ASC',
                    multiSorting: true,

                    multiselect: false,
                    columnResizable: false,
                    columnSelectable: true,
                    selecting: false,
                    selectingCheckboxes: false,
                    selectOnRowClick: false,

                    saveUserPreferences: true,
                    animationsEnabled: true,
                    defaultDateFormat: 'yyyy-mm-dd',
                    deleteConfirmation: true,

                    actions: {
                        listAction: '/JTableFeedProducts/List'
                    },
                    fields: {
                        FeedId: {
                            title: 'Feed',
                            defaultValue: -1,
                            options: '/JTableFeedProducts/FeedOptions',
                            optionsSorting: 'text'
                        },
                        SKU: {
                            title: 'SKU',
                        },
                        //VendorId: {
                        //    title: 'Vendor',
                        //    defaultValue: -1,
                        //    options: '/JTableFeedProducts/VendorOptions',
                        //    optionsSorting: 'text'
                        //},
                        Price: {
                            title: 'Price',
                        },
                        PriceUpdateTime: {
                            title: 'PriceUpdateTime',
                            display: function (data) {
                                return getJtableDisplayTime(data.record.PriceUpdateTime);
                            },
                            create: false,
                            edit: false
                        },
                        Quantity: {
                            title: 'Quantity',
                        },
                        QuantityUpdateTime: {
                            title: 'QuantityUpdateTime',
                            display: function (data) {
                                return getJtableDisplayTime(data.record.QuantityUpdateTime);
                            },
                            create: false,
                            edit: false
                        }
                    }
                };
            }

            // #endregion

            var jtableProductsParams = {

                // #region Container

                title: 'The Products List',

                paging: true,
                pageSize: 20,
                pageSizes: [10, 15, 20, 30, 50, 100],
                pageSizeChangeArea: true,

                sorting: true,
                defaultSorting: 'ModifiedTime DESC',
                multiSorting: true,

                multiselect: false,
                columnResizable: false,
                columnSelectable: true,
                selecting: false,
                selectingCheckboxes: false,
                selectOnRowClick: false,

                saveUserPreferences: true,
                animationsEnabled: true,
                defaultDateFormat: 'yyyy-mm-dd',
                deleteConfirmation: true,

                openChildAsAccordion: true,

                toolbar: {
                    hoverAnimation: true, //Enable/disable small animation on mouse hover to a toolbar item.
                    hoverAnimationDuration: 60, //Duration of the hover animation.
                    hoverAnimationEasing: undefined, //Easing of the hover animation. Uses jQuery's default animation ('swing') if set to undefined.
                    items: [
                        {
                            //icon: '/images/excel.png',
                            text: 'Reload',
                            click: function () {
                               jtable.jtable('reload');
                            }
                        },
                        {
                            text: 'Export',
                            click: function () {
                                exportDialog.dialog("open");
                            }
                        },
                        {
                            text: 'Import',
                            click: function () {
                                importDialog.dialog("open");
                            }
                        }
                    ]
                },

                actions: {
                    listAction: '/JTableProducts/List',
                    deleteAction: '/JTableProducts/Delete',
                    updateAction: '/JTableProducts/Update',
                    createAction: '/JTableProducts/Create'
                },

                // #endregion

                // #region Fields

                fields: {
                    MarketplaceProducts: {
                        title: '',
                        width: '0',
                        sorting: false,
                        edit: false,
                        create: false,
                        listClass: 'jtable-icon-cell',
                        display: function (productData) {
                            //Create an image that will be used to open child table
                            var $img = $('<div class="jtable-icon-marketplace-products" title="Marketplace Products"></div>');
                            //Open child table when user clicks the image
                            $img.click(function () {
                                $('#jTable@(nodeIdSuffix)').jtable('openChildTable',
                                    $img.closest('tr'),
                                    jtableMarketplaceProductsParams(),
                                    function (data) { //opened handler
                                        data.childTable.jtable('load', {
                                            productId: productData.record.Id
                                        });
                                    });
                            });
                            //Return image to show on the person row
                            return $img;
                        }
                    },

                    FeedProducts: {
                        title: '',
                        width: '0',
                        sorting: false,
                        edit: false,
                        create: false,
                        listClass: 'jtable-icon-cell',
                        display: function (productData) {
                            //Create an image that will be used to open child table
                            var $img = $('<div class="jtable-icon-feed-products" title="Feed Products"></div>');
                            //Open child table when user clicks the image
                            $img.click(function () {
                                $('#jTable@(nodeIdSuffix)').jtable('openChildTable',
                                    $img.closest('tr'),
                                    jtableFeedProductsParams(),
                                    function (data) { //opened handler
                                        data.childTable.jtable('load', {
                                            productId: productData.record.Id
                                        });
                                    });
                            });
                            //Return image to show on the person row
                            return $img;
                        }
                    },

                    Id: {
                        key: true,
                        create: false,
                        edit: false,
                        list: false
                    },


                    Id_SKU: {
                        title: 'SKU',
                        //width: '23%'
                    },

                    //CategoryId: {
                    //    title: 'Category',
                    //    defaultValue: -1,
                    //    options: '/JTableProducts/CategoryOptions',
                    //    optionsSorting: 'text'
                    //},
                    Title: {
                        title: 'Title',
                        inputClass: 'ignore',
                        display: function(data) {
                            return data.record.Title ? data.record.Title.truncate(40, false).escapeHtml() : "";
                        }
                    },

                    Id_ISBN10: {
                        title: 'ISBN10'
                    },
                    Id_ISBN13: {
                        title: 'ISBN13'
                    },
                    Id_UPC: {
                        title: 'UPC'
                    },
                    Id_MPN: {
                        title: 'MPN'
                    },
                    MainId: {
                        title: 'MainId',
                        defaultValue: -1,
                        options: '/JTableProducts/DbProductIdsOptions'
                    },

                    ProductType: {
                        title: 'Type',
                        display: function(data) {
                            return data.record.Brand ? data.record.ProductType.truncate(20, false).escapeHtml() : "";
                        }
                    },
                    Vendor: {
                        title: 'Vendor',
                        display: function(data) {
                            return data.record.Brand ? data.record.Vendor.truncate(20, false).escapeHtml() : "";
                        }
                    },
                    Brand: {
                        title: 'Brand',
                        display: function(data) {
                            return data.record.Brand ? data.record.Brand.truncate(20, false).escapeHtml() : "";
                        }
                    },
                    Description: {
                        title: 'Description',
                        type: 'textarea',
                        sorting: false,
                        display: function(data) {
                            return data.record.Description ? data.record.Description.truncate(20, false).escapeHtml() : "";
                        }
                    },
                    Authors: {
                        title: 'Authors',
                        type: 'textarea',
                        display: function(data) {
                            return data.record.Authors ? data.record.Authors.truncate(20, false).escapeHtml() : "";
                        }
                    },
                    ImageUrls: {
                        title: 'ImageUrls',
                        type: 'textarea',
                        display: function(data) {
                            return data.record.ImageUrls ? data.record.ImageUrls.truncate(20, false).escapeHtml() : "";
                        }
                    },
                    WeightKg: {
                        title: 'Weight (lbs)',
                        defaultValue: -1
                    },
                    DefaultPriceUSD: {
                        title: 'Price ($)',
                        defaultValue: -1
                    },

                    CreatedTime: {
                        title: 'Created',
                        display: function (data) {
                            return getJtableDisplayTime(data.record.CreatedTime);
                        },
                        create: false,
                        edit: false
                    },
                    ModifiedTime: {
                        title: 'Modified',
                        display: function (data) {
                            return getJtableDisplayTime(data.record.ModifiedTime);
                        },
                        create: false,
                        edit: false
                    }

                },

                // #endregion

                // #region Events

                //JQuery Validation: https://jqueryvalidation.org/documentation/

                //Initialize validation logic when a form is created
                formCreated: function (event, data) {
                    data.form.validate();
                    data.form.find('input[name="Id_SKU"]').rules( "add", {
                        required: false,
                        minlength: 0,
                        maxlength: 10,
                        number: false,
                        //messages: {
                        //    required: "Required input",
                        //    minlength: jQuery.validator.format("Please, at least {0} characters are necessary")
                        //}
                    });
                    data.form.find('input[name="Id_SKU"]').rules( "add", {
                        maxlength: 20
                    });
                    data.form.find('input[name="Title"]').rules( "add", {
                        maxlength: 120
                    });
                    data.form.find('input[name="Id_ISBN10"]').rules( "add", {
                        maxlength: 10
                    });
                    data.form.find('input[name="Id_ISBN13"]').rules( "add", {
                        maxlength: 13
                    });
                    data.form.find('input[name="Id_UPC"]').rules( "add", {
                        maxlength: 16
                    });
                    data.form.find('input[name="Id_MPN"]').rules( "add", {
                        maxlength: 16
                    });
                    data.form.find('input[name="ProductType"]').rules( "add", {
                        maxlength: 25
                    });
                    data.form.find('input[name="Vendor"]').rules( "add", {
                        maxlength: 25
                    });
                    data.form.find('input[name="Brand"]').rules( "add", {
                        maxlength: 25
                    });
                    data.form.find('input[name="Authors"]').rules( "add", {
                        maxlength: 50
                    });
                    data.form.find('input[name="ImageUrls"]').rules( "add", {
                        maxlength: 1024
                    });
                    data.form.find('input[name="WeightKg"]').rules( "add", {
                        maxlength: 20,
                        number: true
                    });
                    data.form.find('input[name="DefaultPriceUSD"]').rules( "add", {
                        maxlength: 20,
                        number: true
                    });
                },

                //Validate form when it is being submitted
                formSubmitting: function (event, data) {
                    var validator = data.form.validate();
                    return validator.form();
                },

                //Dispose validation logic when form is closed
                formClosed: function (event, data) {
                    var validator = data.form.validate();
                    validator.destroy();
                }

                // #endregion
            };

            var jtable = $('#jTable@(nodeIdSuffix)').jtable(jtableProductsParams);

            var filersForm = $('form#jTable_filters@(nodeIdSuffix)');

            var loadData = function() {
                //Load table data
                jtable.jtable('load', getFormParamsAsObject(filersForm[0]));
            };

            filersForm.submit(function (e) {
                e.preventDefault();
                loadData();
            });

            loadData();

            // #endregion

        });


    </script>

    <form id="jTable_filters@(nodeIdSuffix)" class="jtable-filters" action="">
        <label>Product ID: <input type="text" name="filterProductId" value="" /></label>
        <label>Title: <input type="text" name="filterTitle" value="" /></label>
        <button>Filter</button>
    </form>

    <div id="jTable@(nodeIdSuffix)" class="jtable-container"></div>

    <div id="import-dialog@(nodeIdSuffix)" title="Import to DataBase" style="display: none;">
        <form id="import-options@(nodeIdSuffix)">
            <fieldset>
                <label for="filesType">Files Type</label>
                <br />
                <select name="filesType">
                    <option value="not set" selected>-- Select file type --</option>
                    <option value="fillz">Fillz products (*.txt)</option>
                    <option value="pricefalls">Procefalls products (*.csv)</option>
                    <option value="shopify">Shopify products (*.csv)</option>
                    <option value="database">DataBase (*.xlsx, *.csv)</option>
                </select>
                <br />
                Force match rows by:
                <label><input type="checkbox" name="searchByIds[]" value="SKU" /> SKU</label>
                <label><input type="checkbox" name="searchByIds[]" value="ISBN10" /> ISBN10</label>
                <label><input type="checkbox" name="searchByIds[]" value="ISBN13" /> ISBN13</label>
                <label><input type="checkbox" name="searchByIds[]" value="UPC" /> UPC</label>
                <label><input type="checkbox" name="searchByIds[]" value="MPN" /> MPN</label>
                <br />
                <!-- Allow form submission with keyboard without duplicating the dialog button -->
                <input type="submit" tabindex="-1" style="position:absolute; top:-1000px">
            </fieldset>
        </form><br />
        @Html.Partial("~/Views/Shared/Upload/_Files.cshtml", new FilesModel { NodeIdSuffix = nodeIdSuffix })
        <div class="loading-overlay"></div>
    </div>

    <div id="export-dialog@(nodeIdSuffix)" title="Export from DataBase" style="display: none;">
        <form id="export-options@(nodeIdSuffix)">
            <fieldset>
                <label for="fileType">Output file Type:</label>
                <br />
                <select name="fileType">
                    <option value="not set" selected>-- Select file type --</option>
                    <option value="fillz">Fillz products (*.txt)</option>
                    <option value="pricefalls">Procefalls products (*.csv)</option>
                    <option value="shopify">Shopify products (*.csv)</option>
                    <option value="database">DataBase (*.xlsx, *.csv)</option>
                </select>
                <br />
                <label><input type="checkbox" name="withData" value="true"/> <span>With data</span></label>
                <input type="submit" tabindex="-1" style="position:absolute; top:-1000px">
            </fieldset>
        </form>
        <iframe id="export_frame@(nodeIdSuffix)" src="about:blank" style="width: 1px; height: 1px; opacity: 0;" />
        <div class="loading-overlay"></div>
    </div>

}
else
{
    @:Products table: Access Denied
}

<!-- #endregion -->